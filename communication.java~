import java.io.*;
import java.net.*;
import java.util.*;
public class Communication {
	/*
		存储各种消息的数组：
		1.座位信息：String seatMeg[8][4]
		2.手牌信息：Poker holdMeg[2]
		3.inquire信息：String inquireMeg[8][5];
		5.blind消息：String blindMeg[2][2];
		6.flop消息：Poker flopMeg[3];
	*/
	private String seatMeg[][];
	private Poker holdMeg[];
	private String inquireMeg[][];
	private String blindMeg[][];
	private Poker flopMeg[];
	private int pid;
	
	private Socket socket;
	private BufferedReader input;
	private DataOutputStream output;
	private int localport;
	private int remoteport;
	private byte[] remoteBuf;
	private byte[] localBuf;
	
	public communication(String args){
		//初始化相关参数
		remoteport=Integer.parseInt(args[1]);//服务器端口
		localport=Integer.parseInt(args[3]);//本地端口
		String[] remoteStr = args[0].split("\\.");
		String[] localStr = args[2].split("\\.");
		remoteBuf = new byte[4];
		localBuf = new byte[4];
		
		for(int i = 0; i < 4; i++){
		    remoteBuf[i] = (byte)(Integer.parseInt(remoteStr[i])&0xff);
		}
		
		for(int i = 0; i < 4; i++){
		    localBuf[i] = (byte)(Integer.parseInt(localStr[i])&0xff);
		}
	}
	public void connect(){
		try{
//			socket = new Socket(InetAddress.getByAddress(remoteBuf),remoteport,InetAddress.getByAddress(localBuf),localport);//创建套接字
			socket = new Socket(); 
			socket.setReuseAddress(true); 
			socket.bind(new InetSocketAddress(InetAddress.getByAddress(localBuf),localport)); 
			socket.connect(new InetSocketAddress(InetAddress.getByAddress(remoteBuf), remoteport));
			
			input=new BufferedReader(new InputStreamReader(socket.getInputStream()));
			output=new DataOutputStream(socket.getOutputStream());
			//发送注册消息			
			String reg="reg: "+args[4]+" Bob \n";
			System.out.println(reg);
			output.write(reg.getBytes());
			output.flush();
			//接受服务器发送回来的消息
			int state=0;
			int choose=0;
			try{
				while(true){
					String temp=input.readLine();
					System.out.println("服务器返回:"+temp);
					if(state==0){
						//判断接收的是哪一种类型的消息：座位信息？盲注信息？...
						choose=judgeType(temp);
						state=1;
					}else{
						//得到消息类型后，将该类型消息暂时存放至数组中，当本次该类型消息接收完毕，启动相应的处理程序	
						state=storeMeg(temp,choose);
					}
					
				}
			}
			//关闭输入输出流
			catch(Exception e){
				input.close();
				output.close();
			}
		}catch(Exception e){
			e.printStackTrace();
			
		}
		if(socket!=null){
			try{
				socket.close();
			}
			catch(IOException e){
				socket=null;
				e.printStackTrace();
			}
		}
	}
	//判断并返回消息类型
	public int judgeType(String meg){
		if(meg.equals("seat/"))
			return 1;
		else if(meg.equals("bind/"))
			return 2;
		else if(meg.equals("hold/"))
			return 3;
		else if(meg.equals("inquire/"))
			return 4;
		else if(meg.equals("flop/"))
			return 5;
		else if(meg.equals("inquire/"))
			return 6;
		else if(meg.equals("turn/"))
			return 7;
		else if(meg.equals("river/"))
			return 8;
		else if(meg.equals("showdown/"))
			return 9;
		else if(meg.equals("pot-win/"))
			return 10;
		else if(meg.equals("game-over"))
	}
	public int storeMeg(String meg,int choose){
		switch(choose){
			case 1:
				if(meg.equals("/seat")){
					e_seat(seatMeg,);
				}
				break;
			case 2:
				break;
			case 3:
				break;
			case 4:
				break;
			case 5:
				break;
			case 6:
				break;
			case 7:
				break;
			case 8:
				break;
			case 9:
				break;
			case 10:
				break;
		}
	}	
}
